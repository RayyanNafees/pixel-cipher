'''
Module for testing and experimenting code
'''

from fib import fibify, defib, file_to_int
import time


# CSV to fib function


# FileCheck: Checks the file_data == defibified:= mul(fibonacci cycles)+remainder


def fib_check(file_path: str) -> bool:
    '''Tests if the int data generated by defib(cycles+remainder) == Actual int data
    of the fle '''
    start_time = time.time()
    file_int = file_to_int(file_path)

    cycles, rem = fibify(file_int)

    generated_int = defib(cycles, rem)

    # results:
    isequal = generated_int == file_int

    print('Test Results: ', isequal)
    if generated_int > file_int:
        print(
            f"Generated int is large by {len(str(generated_int- file_int))} digits \
            (generated-actual)")
    else:
        print(
            f"Generated int is small by {len(str(file_int-generated_int))} digits \
(actual-generated)")
    print('Generated length: ', len(str(generated_int)))
    print('File Data length:', len(str(file_int)))

    time_taken = time.time() - start_time
    print("Time Taken: ", time_taken)
    return isequal


# fib_check('cipher.js')

from fib import fibonacci


def cycles_rem(big_int: int) -> list[int]:
    '''Returns the Fiboacci Cycles & remainders after dividng and
    logs the variables for debugging'''
    print('Test int: ', big_int)

    for cycle, term in enumerate(fibonacci()):
        if big_int <= term:
            return [cycle, big_int]

        print('\nCycle ', cycle, ':')
        prev_big_int = big_int

        big_int //= term

        print(f'{big_int} = {prev_big_int}//{term}')

print(cycles_rem(18))